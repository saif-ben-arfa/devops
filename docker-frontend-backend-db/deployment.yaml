#Pods are the deployable units in Kubernetes. A pod represents a single instance of a running process in your cluster. Pods can contain one or more containers
#Labels are key-value pairs attached to objects, such as pods, that are used to identify and organize them. Labels can be used to select and group objects based on specific criteria. 
#Namespace is a way to divide cluster resources between multiple users. Namespaces provide a scope for names, allowing you to create multiple resources with the same name in different namespaces.
#configuration file used to define and manage the deployment of applications and services within a Kubernetes cluster.
# show the Deployment " kubectl get deployments -n app-namespace"
#kubectl get pods -n app-namespace
#kubectl get nodes
#kubectl get all -n app-namespace
#kubectl apply -f deployment.yaml
#kubectl rollout restart deployment backend -n app-namespace
# Deployment for the frontend application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend  # Name of the deployment
  namespace: app-namespace  # Namespace in which the deployment is created
spec:
  replicas: 1  # Number of pod replicas
  selector:
    matchLabels:
      app: frontend  # Label selector to identify the pods managed by this deployment
  template:
    metadata:
      labels:
        app: frontend  # Labels assigned to the pods
    spec:
      containers:
      - name: docker-frontend-backend-db-frontend-1 # Name of the container #
        image: saifbenarfa/frontend:latest  # Updated Docker image
        ports:
        - containerPort: 80  # Port exposed by the container
        env:
        - name: REACT_APP_API_URL
          value: "http://backend:3001/api"  # Environment variable for the container
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Deployment for the backend application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend  # Name of the deployment
  namespace: app-namespace  # Namespace in which the deployment is created
spec:
  replicas: 1  # Number of pod replicas
  selector:
    matchLabels:
      app: backend  # Label selector to identify the pods managed by this deployment
  template:
    metadata:
      labels:
        app: backend  # Labels assigned to the pods
    spec:
      containers:
      - name: docker-frontend-backend-db-backend-1 # Name of the container
        image: saifbenarfa/backend:latest  # Updated Docker image
        ports:
        - containerPort: 3001  # Port exposed by the container
        env:
        - name: MONGO_URL
          value: "mongodb://mongo:27017/todos"  # Environment variable for the container
---
# Deployment for the MongoDB database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo  # Name of the deployment
  namespace: app-namespace  # Namespace in which the deployment is created
spec:
  replicas: 1  # Number of pod replicas
  selector:
    matchLabels:
      app: mongo  # Label selector to identify the pods managed by this deployment
  template:
    metadata:
      labels:
        app: mongo  # Labels assigned to the pods
    spec:
      containers:
      - name: docker-frontend-backend-db-mongo-1 # Name of the container
        image: saifbenarfa/mongo:latest  # Updated Docker image
        ports:
        - containerPort: 27017  # Port exposed by the container
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1"



            #cd "c:\Users\user\Desktop\dev ops\app 1\docker-frontend-backend-db"